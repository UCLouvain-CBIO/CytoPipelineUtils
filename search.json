[{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/articles/Demo.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Demonstration of the CytoPipeline R package suite functionalities","text":"","code":"## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.5 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] BiocStyle_2.33.1 ##  ## loaded via a namespace (and not attached): ##  [1] digest_0.6.37       desc_1.4.3          R6_2.5.1            ##  [4] bookdown_0.40       fastmap_1.2.0       xfun_0.48           ##  [7] cachem_1.1.0        knitr_1.48          htmltools_0.5.8.1   ## [10] rmarkdown_2.28      lifecycle_1.0.4     cli_3.6.3           ## [13] sass_0.4.9          pkgdown_2.1.1.9000  textshaping_0.4.0   ## [16] jquerylib_0.1.4     systemfonts_1.1.0   compiler_4.4.1      ## [19] tools_4.4.1         ragg_1.3.3          evaluate_1.0.1      ## [22] bslib_0.8.0         yaml_2.3.10         BiocManager_1.30.25 ## [25] jsonlite_1.8.9      rlang_1.1.4         fs_1.6.4            ## [28] htmlwidgets_1.6.4"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philippe Hauchamps. Author, maintainer. Laurent Gatto. Author. Dan Lin. Contributor.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hauchamps P, Gatto L (2024). CytoPipelineUtils: Utils use CytoPipeline. R package version 0.99.7, https://uclouvain-cbio.github.io/CytoPipelineUtils.","code":"@Manual{,   title = {CytoPipelineUtils: Utils for use with CytoPipeline},   author = {Philippe Hauchamps and Laurent Gatto},   year = {2024},   note = {R package version 0.99.7},   url = {https://uclouvain-cbio.github.io/CytoPipelineUtils}, }"},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/index.html","id":"what-is-cytopipelineutils","dir":"","previous_headings":"Automation and visualization of flow cytometry data analysis pipelines","what":"What is CytoPipelineUtils?","title":"Utils for use with CytoPipeline","text":"CytoPipelineUtils meant used conjunction CytoPipeline package (see ), provides support automation visualization flow cytometry data analysis pipelines. CytoPipelineUtils provides series wrapper implementations can turn defined CytoProcessingSteps CytoPipeline. therefore helper package, aimed hosting wrapper implementations various functions various packages. CytoPipelineUtils open contributions. want implement wrapper favourite pre-processing function use CytoPipeline object, place ! , please issue pull request.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/index.html","id":"license","dir":"","previous_headings":"Automation and visualization of flow cytometry data analysis pipelines","what":"License","title":"Utils for use with CytoPipeline","text":"CytoPipelineUtils code provided GPL license version 3.0 higher. documentation, including manual pages vignettes, distributed CC -SA 4.0 license.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/CytoPipelineUtils-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CytoPipelineUtils: Utils for use with CytoPipeline — CytoPipelineUtils-package","title":"CytoPipelineUtils: Utils for use with CytoPipeline — CytoPipelineUtils-package","text":"package meant used conjunction CytoPipeline package, provides support automation visualization flow cytometry data analysis pipelines. CytoPipelineUtils provides series wrapper implementations can turn defined CytoProcessingSteps CytoPipeline. therefore helper package, aimed hosting wrapper implementations various functions various packages.","code":""},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/CytoPipelineUtils-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CytoPipelineUtils: Utils for use with CytoPipeline — CytoPipelineUtils-package","text":"Maintainer: Philippe Hauchamps philippe.hauchamps@uclouvain.(ORCID) Authors: Laurent Gatto laurent.gatto@uclouvain.(ORCID) contributors: Dan Lin dan.8.lin@gsk.com [contributor]","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/addFlowJoGatesInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"add FlowJo manual gates membership information to a flow frame — addFlowJoGatesInfo","title":"add FlowJo manual gates membership information to a flow frame — addFlowJoGatesInfo","text":"reads flowjo workspace file using CytoML package, extract cell cell information whether considered cell within outside user chosen gates. Note selected gate, also hierarchy gates, checked extracting gate membership information.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/addFlowJoGatesInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add FlowJo manual gates membership information to a flow frame — addFlowJoGatesInfo","text":"","code":"addFlowJoGatesInfo(ff, gateNames, wspFile, ...)"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/addFlowJoGatesInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add FlowJo manual gates membership information to a flow frame — addFlowJoGatesInfo","text":"ff flowCore::flowFrame gateNames character vector, containing names flowJo gates checked wspFile flowjo workspace ... Extra arguments passed getFlowJoLabels()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/addFlowJoGatesInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add FlowJo manual gates membership information to a flow frame — addFlowJoGatesInfo","text":"input flowFrame, filled additional columns logical one per checked gate. name new columns match name gates.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/anonymizeMarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"anonymizing some markers of a flowFrame — anonymizeMarkers","title":"anonymizing some markers of a flowFrame — anonymizeMarkers","text":": flowCore::flowFrame, update marker names. translated : updating desc field parameters pheno data dataframe updating corresponding keyword value flowFrame.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/anonymizeMarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"anonymizing some markers of a flowFrame — anonymizeMarkers","text":"","code":"anonymizeMarkers(   ff,   oldMarkerNames,   newMarkerNames,   toUpdateKeywords = NULL,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/anonymizeMarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"anonymizing some markers of a flowFrame — anonymizeMarkers","text":"ff flowCore::flowFrame oldMarkerNames marker names amended, alternatively, channel names update marker names newMarkerNames new marker names given provided oldMarkerNames toUpdateKeywords list new keyword values ... arguments (used)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/anonymizeMarkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"anonymizing some markers of a flowFrame — anonymizeMarkers","text":"new flowCore::flowFrame updated marker names (possibly, new experiment name)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/anonymizeMarkers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"anonymizing some markers of a flowFrame — anonymizeMarkers","text":"","code":"data(OMIP021Samples)  retFF <- anonymizeMarkers(OMIP021Samples[[1]],                           oldMarkerNames = c(\"FSC-A\",\"BV785 - CD3\"),                           newMarkerName = c(\"Fwd Scatter-A\", \"CD3\"),                           toUpdateKeywords = list(                               \"EXPERIMENT NAME\" = \"MyExperiment\"))"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/applyFlowJoGate.html","id":null,"dir":"Reference","previous_headings":"","what":"perform manual gating from a FlowJo gate — applyFlowJoGate","title":"perform manual gating from a FlowJo gate — applyFlowJoGate","text":"perform manual gating : reading flowjo workspace file using CytoML package, apply one gates input flowFrame. Note selected gate, also hierarchy gates, applied input dataset.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/applyFlowJoGate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"perform manual gating from a FlowJo gate — applyFlowJoGate","text":"","code":"applyFlowJoGate(ff, gateName, wspFile, ...)"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/applyFlowJoGate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"perform manual gating from a FlowJo gate — applyFlowJoGate","text":"ff flowCore::flowFrame gateName name flowJo gate applied wspFile flowjo workspace ... Extra arguments passed getFlowJoLabels()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/applyFlowJoGate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"perform manual gating from a FlowJo gate — applyFlowJoGate","text":"flowFrame containing events inside gate","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/getEventNbFromFJGates.html","id":null,"dir":"Reference","previous_headings":"","what":"perform manual gating from a FlowJo gate — getEventNbFromFJGates","title":"perform manual gating from a FlowJo gate — getEventNbFromFJGates","text":"perform manual gating : reading flowjo workspace file using flowWorkspace library, apply selected gates input flowFrame. provides nb remaining events selected gates.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/getEventNbFromFJGates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"perform manual gating from a FlowJo gate — getEventNbFromFJGates","text":"","code":"getEventNbFromFJGates(   ff,   wspFile,   gates = NULL,   defaultGates = c(\"leaves\", \"all\"),   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/getEventNbFromFJGates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"perform manual gating from a FlowJo gate — getEventNbFromFJGates","text":"ff flowCore::flowFrame wspFile flowjo workspace gates vector flowJo gate nodes parse (common groups!). Default NULL uses either leaf node first group, gates first group, depending 'defaultGates'. defaultGates gates specified, triggers choice either : leaf nodes ('leaves') (default) nodes ('') ... Extra arguments passed getFlowJoLabels()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/getEventNbFromFJGates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"perform manual gating from a FlowJo gate — getEventNbFromFJGates","text":"dataframe nb events per gate, including one additional 'unlabelled' gate un-labelled events.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/getFlowJoLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a flowjo workspace file — getFlowJoLabels","title":"Process a flowjo workspace file — getFlowJoLabels","text":"Reads flowjo workspace file using flowWorkspace library returns vector label cell flowFrame set specified gates. flowFrame generated several files (contains 'File' column containing file index), groups contain group name apply files/samples","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/getFlowJoLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a flowjo workspace file — getFlowJoLabels","text":"","code":"getFlowJoLabels(   ff,   wspFile,   groups = \"All Samples\",   sampleInGroups = NULL,   cellTypes = NULL,   defaultCellTypes = c(\"leaves\", \"all\"),   specialCharsInChannels = c(\"/\"),   FlowJoCharsinChannels = c(\"_\"),   withFJv10TimeCorrection = TRUE,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/getFlowJoLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a flowjo workspace file — getFlowJoLabels","text":"ff flowCore::flowFrame wspFile flowjo workspace groups vector flowjo groups parse flowjo workspace (.e. one sample/file used generate flowFrame). Default c(\"Samples\") sampleInGroups vector flowjo sample index group use flowjo workspace (.e. one sample/file used generate flowFrame). provided, start 1 group increment. Default NULL. cellTypes vector flowJo gate nodes parse (common groups!). Default NULL uses either leaf node first group, gates first group, depending 'defaultCellTypes'. defaultCellTypes cellTypes specified, triggers choice either : leaf nodes ('leaves') (default) nodes ('') specialCharsInChannels vector special char litterals replaced FlowJo workspace FlowJoCharsinChannels vector new char litterals applied FlowJo workspace withFJv10TimeCorrection TRUE (default), applies time correction cope bug flowJo 10.0. kept TRUE FloJo v>10.0 time channel used gating. Since FlowJo v10, time channel read differently fcs files (see https://docs.flowjo.com/flowjo/experiment-based-platforms/kinetics/ -flowjo-handles-time/). resulting scale transformation time channel normally stored corresponding tranformation gain parameter FlowJo workspace. However, somehow gain parameter can sometimes wrong .wsp file, workaround consists correcting time channel values cytoset prior gating, order gate labels calculated correctly. ... Extra arguments passed CytoML::flowjo_to_gatingset()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/getFlowJoLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a flowjo workspace file — getFlowJoLabels","text":"list : first element (\"matrix\") matrix containing filtering results specified gate second element (\"labels\") vector assigns one label cell. cell type correspond specific cell, keyword 'unlabeled' assigned cell. cell belongs several gates (meaning gates ar disjoints), cell assigned gate less matching cells.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/qualityControlFlowClean.html","id":null,"dir":"Reference","previous_headings":"","what":"perform QC with flowClean — qualityControlFlowClean","title":"perform QC with flowClean — qualityControlFlowClean","text":"function wrapper around flowClean::clean() function. also pre-selects channels handled (=> signal channels)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/qualityControlFlowClean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"perform QC with flowClean — qualityControlFlowClean","text":"","code":"qualityControlFlowClean(   ff,   preTransform = FALSE,   transList = NULL,   outputDiagnostic = FALSE,   outputDir = NULL,   verbose = TRUE,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/qualityControlFlowClean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"perform QC with flowClean — qualityControlFlowClean","text":"ff flowCore::flowFrame preTransform TRUE, apply transList scale transform prior running gating algorithm transList applied conjunction preTransform outputDiagnostic TRUE, stores diagnostic files generated flowClean outputDir directory outputDir used conjunction outputDiagnostic verbose TRUE messages comments QC process ... additional parameters passed flowClean::clean()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/qualityControlFlowClean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"perform QC with flowClean — qualityControlFlowClean","text":"flowCore::flowFrame removed low quality events input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/qualityControlFlowClean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"perform QC with flowClean — qualityControlFlowClean","text":"","code":"rawDataDir <- system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles( sampleFiles = sampleFiles, whichSamples = \"all\", truncate_max_range = truncateMaxRange, min.limit = minLimit)  ff_QualityControl <- suppressWarnings( qualityControlFlowClean(fsRaw[[2]], binSize = 0.01, # default nCellCutoff = 500, # default cutoff = \"median\", # default fcMax = 1.3, # default nstable = 5)) #> Applying flowClean method... #> [1] \"flowClean detected too few cells in /__w/_temp/Library/CytoPipeline/extdata/Donor2.fcs.\""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/qualityControlFlowCut.html","id":null,"dir":"Reference","previous_headings":"","what":"perform QC with flowCut — qualityControlFlowCut","title":"perform QC with flowCut — qualityControlFlowCut","text":"function wrapper around flowCut::flowCut() function. also pre-selects channels handled (=> signal channels)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/qualityControlFlowCut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"perform QC with flowCut — qualityControlFlowCut","text":"","code":"qualityControlFlowCut(   ff,   preTransform = FALSE,   transList = NULL,   outputDiagnostic = FALSE,   outputDir = NULL,   verbose = TRUE,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/qualityControlFlowCut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"perform QC with flowCut — qualityControlFlowCut","text":"ff flowCore::flowFrame preTransform TRUE, apply transList scale transform prior running gating algorithm transList applied conjunction preTransform outputDiagnostic TRUE, stores diagnostic files generated flowCut outputDir directory outputDir used conjunction outputDiagnostic verbose TRUE messages comments QC process ... additional parameters passed flowCut::flowCut()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/qualityControlFlowCut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"perform QC with flowCut — qualityControlFlowCut","text":"flowCore::flowFrame removed low quality events input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/qualityControlFlowCut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"perform QC with flowCut — qualityControlFlowCut","text":"","code":"rawDataDir <- system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  ff_QualityControl <-     qualityControlFlowCut(         fsRaw[[2]],         MaxContin = 0.1,         MeanOfMeans = 0.13,         MaxOfMeans = 0.15,         MaxValleyHgt = 0.1,         MaxPercCut = 0.3,         LowDensityRemoval = 0.1,         RemoveMultiSD = 7,         AlwaysClean = FALSE,         IgnoreMonotonic = FALSE,         MonotonicFix = NULL,         Measures = c(1:8)) #> Applying flowCut method... #> The FileID is: 2024_10_15__10_08_25 #> Channels 22 are monotonically increasing in time and have been removed from the analysis. #> None deleted from flowCut low dens removal. #> None deleted from flowCut segment removal. #> The file has been flagged. The largest continuous jump was larger than 10% of the range of the 2-98 percentile of the full data. #> The file has been flagged. The max ranged means differ more than 15% of the range of the 2-98 percentile of the full data. #> Type of Gating: Upper. #> The file has been flagged TFTF #> Cleaning completed in: 00:00:00 #> Running flowCut a second time. #> Channels 22 are monotonically increasing in time and have been removed from the analysis. #> None deleted from flowCut low dens removal. #> None deleted from flowCut segment removal. #> The file has been flagged. The largest continuous jump was larger than 10% of the range of the 2-98 percentile of the full data. #> The file has been flagged. The max ranged means differ more than 15% of the range of the 2-98 percentile of the full data. #> Type of Gating: Upper. #> The file has been flagged TFTF #> Cleaning completed in: 00:00:00"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDeadCellsDeGate.html","id":null,"dir":"Reference","previous_headings":"","what":"remove dead cells from a flowFrame — removeDeadCellsDeGate","title":"remove dead cells from a flowFrame — removeDeadCellsDeGate","text":"function removes dead cells flowFrame, using specific '()live/dead' channel, flowDensity::deGate() gating function (see doc flowDensity package)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDeadCellsDeGate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove dead cells from a flowFrame — removeDeadCellsDeGate","text":"","code":"removeDeadCellsDeGate(   ff,   preTransform = FALSE,   transList = NULL,   LDMarker,   keepPositivePop = FALSE,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDeadCellsDeGate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove dead cells from a flowFrame — removeDeadCellsDeGate","text":"ff flowCore::flowFrame preTransform TRUE, apply transList scale transform prior running gating algorithm transList applied conjunction preTransform == TRUE LDMarker character containing exact name marker corresponding Live/Dead channel, Live/Dead channel name keepPositivePop logical flag stating whether want keep, gating, population positive LDMarker (TRUE) negative LDmarker (FALSE) ... additional parameters passed flowDensity::deGate()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDeadCellsDeGate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove dead cells from a flowFrame — removeDeadCellsDeGate","text":"flowCore::flowFrame removed dead cells input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDeadCellsDeGate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"remove dead cells from a flowFrame — removeDeadCellsDeGate","text":"rawDataDir <- system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <- file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDeadCellsDeGate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove dead cells from a flowFrame — removeDeadCellsDeGate","text":"","code":"rawDataDir <- system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  suppressWarnings(ff_m <- removeMarginsPeacoQC(x = fsRaw[[2]])) #> Removing margins from file : Donor2.fcs      ff_c <-     compensateFromMatrix(ff_m,                          matrixSource = \"fcs\")          transList <-      estimateScaleTransforms(                 ff = ff_c,         fluoMethod = \"estimateLogicle\",         scatterMethod = \"linear\",         scatterRefMarker = \"BV785 - CD3\")  ff_lcells <-     removeDeadCellsDeGate(ff_c,                           preTransform = TRUE,                           transList = transList,                           LDMarker = \"L/D Aqua - Viability\",                           keepPositivePop = FALSE) #> Removing Dead Cells events (using flowDensity::deGate()) from file : Donor2.fcs"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDebrisFlowClust.html","id":null,"dir":"Reference","previous_headings":"","what":"remove debris from a flowFrame, using flowClust — removeDebrisFlowClust","title":"remove debris from a flowFrame, using flowClust — removeDebrisFlowClust","text":"function removes debris flowFrame, using clustering capabilities flowClust::tmixFilter(). idea pre-select number clusters found (FSC,SSC) 2D view, select clusters behalve one closest nearest origin. take events inside probaLevel quantile curve least one remaining clusters.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDebrisFlowClust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove debris from a flowFrame, using flowClust — removeDebrisFlowClust","text":"","code":"removeDebrisFlowClust(   ff,   FSCChannel,   SSCChannel,   nClust,   probaLevel = 0.9,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDebrisFlowClust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove debris from a flowFrame, using flowClust — removeDebrisFlowClust","text":"ff flowCore::flowFrame FSCChannel name FSC channel SSCChannel name SSC channel nClust number clusters identify probaLevel probability level ... additional parameters passed flowClust::flowClust()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDebrisFlowClust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove debris from a flowFrame, using flowClust — removeDebrisFlowClust","text":"flowCore::flowFrame removed debris events input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDebrisFlowClust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove debris from a flowFrame, using flowClust — removeDebrisFlowClust","text":"","code":"rawDataDir <- system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  suppressWarnings(ff_m <- removeMarginsPeacoQC(x = fsRaw[[2]])) #> Removing margins from file : Donor2.fcs      ff_c <-     compensateFromMatrix(ff_m,                          matrixSource = \"fcs\")           ff_cells <-     removeDebrisFlowClust(ff_c,                           FSCChannel = \"FSC-A\",                           SSCChannel = \"SSC-A\",                           nClust = 3,                           probaLevel = 0.9,                           B = 100) #> Using the serial version of flowClust"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDebrisFlowClustTmix.html","id":null,"dir":"Reference","previous_headings":"","what":"remove debris from a flowFrame, using flowClust — removeDebrisFlowClustTmix","title":"remove debris from a flowFrame, using flowClust — removeDebrisFlowClustTmix","text":"function removes debris flowFrame, using clustering capabilities flowClust::tmixFilter(). idea pre-select number clusters found (FSC,SSC) 2D view, eliminate cluster closest origin.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDebrisFlowClustTmix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove debris from a flowFrame, using flowClust — removeDebrisFlowClustTmix","text":"","code":"removeDebrisFlowClustTmix(ff, FSCChannel, SSCChannel, nClust, ...)"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDebrisFlowClustTmix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove debris from a flowFrame, using flowClust — removeDebrisFlowClustTmix","text":"ff flowCore::flowFrame FSCChannel name FSC channel SSCChannel name SSC channel nClust number clusters identify ... additional parameters passed flowClust::tmixFilter()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDebrisFlowClustTmix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove debris from a flowFrame, using flowClust — removeDebrisFlowClustTmix","text":"flowCore::flowFrame removed debris events input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDebrisFlowClustTmix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove debris from a flowFrame, using flowClust — removeDebrisFlowClustTmix","text":"","code":"rawDataDir <- system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  suppressWarnings(ff_m <- removeMarginsPeacoQC(x = fsRaw[[2]])) #> Removing margins from file : Donor2.fcs      ff_c <-     compensateFromMatrix(ff_m,                          matrixSource = \"fcs\")           ff_cells <-     removeDebrisFlowClustTmix(ff_c,                               FSCChannel = \"FSC-A\",                               SSCChannel = \"SSC-A\",                               nClust = 3,                               level = 0.97,                               B = 100) #> The prior specification has no effect when usePrior=no #> Using the serial version of flowClust"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDoubletsFlowStats.html","id":null,"dir":"Reference","previous_headings":"","what":"remove doublets from a flowFrame, using flowStats — removeDoubletsFlowStats","title":"remove doublets from a flowFrame, using flowStats — removeDoubletsFlowStats","text":"Wrapper around flowStats::singletGate(). Can apply flowStats function subsequently several channel pairs, e.g. (FSC-, FSC-H) (SSC-, SSC-H)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDoubletsFlowStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove doublets from a flowFrame, using flowStats — removeDoubletsFlowStats","text":"","code":"removeDoubletsFlowStats(   ff,   areaChannels,   heightChannels,   widerGate = FALSE,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDoubletsFlowStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove doublets from a flowFrame, using flowStats — removeDoubletsFlowStats","text":"ff flowCore::flowFrame areaChannels character vector containing name 'area type' channels one wants use heightChannels character vector containing name 'height type' channels one wants use widerGate boolean wider_gate parameter flowStats::singletGate() ... additional parameters passed flowStats::singletGate()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDoubletsFlowStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove doublets from a flowFrame, using flowStats — removeDoubletsFlowStats","text":"flowCore::flowFrame removed doublets events input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDoubletsFlowStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove doublets from a flowFrame, using flowStats — removeDoubletsFlowStats","text":"","code":"rawDataDir <- system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  suppressWarnings(ff_m <- removeMarginsPeacoQC(x = fsRaw[[2]])) #> Removing margins from file : Donor2.fcs      ff_c <-     compensateFromMatrix(ff_m,                          matrixSource = \"fcs\")          ff_s <-     removeDoubletsFlowStats(ff_c,                             areaChannels = c(\"FSC-A\", \"SSC-A\"),                             heightChannels = c(\"FSC-H\", \"SSC-H\"),                             widerGate = TRUE) #> Warning: replacing previous import ‘flowViz::contour’ by ‘graphics::contour’ when loading ‘flowStats’"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDoubletsPeacoQC.html","id":null,"dir":"Reference","previous_headings":"","what":"remove doublets from a flowFrame, using PeacoQC — removeDoubletsPeacoQC","title":"remove doublets from a flowFrame, using PeacoQC — removeDoubletsPeacoQC","text":"wrapper around PeacoQC::RemoveDoublets(). Can apply PeacoQC function subsequently several channel pairs, e.g. (FSC-, FSC-H) (SSC-, SSC-H)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDoubletsPeacoQC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove doublets from a flowFrame, using PeacoQC — removeDoubletsPeacoQC","text":"","code":"removeDoubletsPeacoQC(   ff,   areaChannels,   heightChannels,   nmads = rep(4, length(areaChannels)),   verbose = TRUE,   ... )"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDoubletsPeacoQC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove doublets from a flowFrame, using PeacoQC — removeDoubletsPeacoQC","text":"ff flowCore::flowFrame areaChannels character vector containing name 'area type' channels one wants use heightChannels character vector containing name 'height type' channels one wants use nmads numeric vector bandwidth ratio allowed, per channels pair (cells kept ratio -channel[] -H channel[] smaller median ratio + nmad[] times median absolute deviation ratios). Default 4, channel pairs. verbose set TRUE, median ratio width printed. ... additional parameters passed PeacoQC::RemoveDoublets()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDoubletsPeacoQC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove doublets from a flowFrame, using PeacoQC — removeDoubletsPeacoQC","text":"flowCore::flowFrame removed doublets events input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeDoubletsPeacoQC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove doublets from a flowFrame, using PeacoQC — removeDoubletsPeacoQC","text":"","code":"rawDataDir <- system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  suppressWarnings(ff_m <- removeMarginsPeacoQC(x = fsRaw[[2]])) #> Removing margins from file : Donor2.fcs      ff_c <-     compensateFromMatrix(ff_m,                          matrixSource = \"fcs\")          ff_s <-     removeDoubletsPeacoQC(ff_c,                           areaChannels = c(\"FSC-A\", \"SSC-A\"),                           heightChannels = c(\"FSC-H\", \"SSC-H\"),                           nmads = c(3, 5))                             #> Median ratio: 1.11051333489904, width: 0.146677138600654 #> Median ratio: 1.07502856441465, width: 0.15333572575707"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeMarginsFlowAI.html","id":null,"dir":"Reference","previous_headings":"","what":"remove margin events, using flowAI — removeMarginsFlowAI","title":"remove margin events, using flowAI — removeMarginsFlowAI","text":"wrapper around flowAI::flow_auto_qc(), inputs directed towards specifically remove margin events. current implementation, signal channels, .e. scatter fluo channels scanned.","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeMarginsFlowAI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"remove margin events, using flowAI — removeMarginsFlowAI","text":"","code":"removeMarginsFlowAI(x, ...)"},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeMarginsFlowAI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"remove margin events, using flowAI — removeMarginsFlowAI","text":"x flowCore::flowFrame flowCore::flowSet ... additional parameters passed flowAI::flow_auto_qc(), apart following ones : remove_from, output, ChExcludeFM, html_report, mini_report, fcs_QC, fcs_highQ, fcs_lowQ, folder_results","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeMarginsFlowAI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"remove margin events, using flowAI — removeMarginsFlowAI","text":"flowCore::flowFrame removed doublets events input","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/reference/removeMarginsFlowAI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"remove margin events, using flowAI — removeMarginsFlowAI","text":"","code":"rawDataDir <- system.file(\"extdata\", package = \"CytoPipeline\") sampleFiles <-     file.path(rawDataDir, list.files(rawDataDir, pattern = \"Donor\"))  truncateMaxRange <- FALSE minLimit <- NULL  # create flowCore::flowSet with all samples of a dataset fsRaw <- readSampleFiles(     sampleFiles = sampleFiles,     whichSamples = \"all\",     truncate_max_range = truncateMaxRange,     min.limit = minLimit)  ff_m <- removeMarginsFlowAI(x = fsRaw[[2]]) #> Quality control for the file: Donor2 #> 10.44% of anomalous cells detected in the flow rate check.  #> 0% of anomalous cells detected in signal acquisition check.  #> 0.1% of anomalous cells detected in the dynamic range check."},{"path":[]},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/news/index.html","id":"cytopipelineutils-0-99","dir":"Changelog","previous_headings":"","what":"CytoPipelineUtils 0.99.7","title":"CytoPipelineUtils 0.99","text":"implemented pkgdown customization","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/news/index.html","id":"cytopipelineutils-0-99-1","dir":"Changelog","previous_headings":"","what":"CytoPipelineUtils 0.99.6","title":"CytoPipelineUtils 0.99","text":"anonymizeMarkers() can now work marker anonymization (keyword changes) implemented addFlowJoGatesInfo()","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/news/index.html","id":"cytopipelineutils-0-99-2","dir":"Changelog","previous_headings":"","what":"CytoPipelineUtils 0.99.5","title":"CytoPipelineUtils 0.99","text":"applyFlowJoGate(): try avoid using ‘Samples’ generic sample group query flowjo workspace (order avoid CytoML warning using ‘Samples’)","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/news/index.html","id":"cytopipelineutils-0-99-3","dir":"Changelog","previous_headings":"","what":"CytoPipelineUtils 0.99.4","title":"CytoPipelineUtils 0.99","text":"Added getEventNbFromFJGates() getFlowJoLabels(), one cellTypes found sample group, issue warning instead error, populates corresponding output NA’s","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/news/index.html","id":"cytopipelineutils-0-99-4","dir":"Changelog","previous_headings":"","what":"CytoPipelineUtils 0.99.3","title":"CytoPipelineUtils 0.99","text":"applyFlowJoGate() can now match sample file sample names wsp file, using pattern matching, instead full file name matching","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/news/index.html","id":"cytopipelineutils-0-99-5","dir":"Changelog","previous_headings":"","what":"CytoPipelineUtils 0.99.2","title":"CytoPipelineUtils 0.99","text":"added 2nd version removeDebrisFlowClust() applyFlowJoGate() can now use different flowJo wsp files, depending pData","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/news/index.html","id":"cytopipelineutils-0-99-6","dir":"Changelog","previous_headings":"","what":"CytoPipelineUtils 0.99.1","title":"CytoPipelineUtils 0.99","text":"added support FlowJo manual gating CytoProcessingStep used file.path() instead paste0() construct file paths","code":""},{"path":"https://uclouvain-cbio.github.io/CytoPipelineUtils/news/index.html","id":"cytopipelineutils-0-99-7","dir":"Changelog","previous_headings":"","what":"CytoPipelineUtils 0.99.0","title":"CytoPipelineUtils 0.99","text":"First version","code":""}]
